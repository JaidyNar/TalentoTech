# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M0ok3HrQeh1sOE2ZNGh-XisswkmZZLq_
"""

# Carga de paquetes necesarios
!pip install mysql-connector-python
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

import mysql.connector
from sqlalchemy import create_engine

from google.colab import drive
drive.mount('/content/drive')

# leer la base de datos de Titanic
file_path = ("/content/drive/MyDrive/google colab/titanic.csv")
titanic_df = pd.read_csv(file_path)

# 1. realizando un muestreo de los datos para ver su contenido
titanic_df.sample(3)

# revisando qué columnas contiene el dataset
print(f"El dataset contiene {titanic_df.shape[0]} filas y {titanic_df.shape[1]} columnas")
print(f" Las columnas son: {list(titanic_df.keys())}")

# mirando los tipos de datos de las columnas
titanic_df.info()

#Eliminar columna cabin porque tiene mucos datos faltantantes
titanic_df = titanic_df.drop('Cabin', axis=1)

# Revisar cambios
titanic_df.info()

# eliminar fila completa con celdas vacías
titanic_df.dropna(inplace=True)
titanic_df.info()

# mirando las variables aleatorias
titanic_df.describe(include=["number"])

# Describiendo los objetos
titanic_df.describe(include=['object'])

# Contar el número de sobrevivientes por género
survived_by_gender = titanic_df.groupby('Sex')['Survived'].sum()

# Crear el gráfico de barras
survived_by_gender.plot(kind='bar', color=['blue', 'pink'])
plt.xlabel('Sex')
plt.ylabel('Survived')
plt.title('sobrevivientes según género')
plt.grid(True)

# Contar el número de sobrevivientes por class
survived_by_class = titanic_df.groupby('Pclass')['Survived'].sum()

# Crear el gráfico lineal
survived_by_class.plot(kind='line', marker='o', color='blue', linestyle='-')

# Personalizar el gráfico
plt.xlabel('Pclass')
plt.ylabel('# Survived')
plt.title('Número de Sobrevivientes por Clase')
plt.xticks(survived_by_class.index)  # Usar los índices como etiquetas del eje X
plt.grid(True)

# Mostrar el gráfico
plt.show()

#Buscamos más datos atípicos en columnas numéricas, mirando los valores en cada columna
cols_num = [ 'PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']
fig, ax = plt.subplots(nrows=7, ncols=1, figsize=(8,30)) #crea una figura con 7 subgráficos dispuestos en una columna

fig.subplots_adjust(hspace=0.5) #ajusta el espaciado vertical entre los subgráficos

for i, col in enumerate(cols_num):
    sns.boxplot(x=col, data=titanic_df, ax=ax[i])
    ax[i].set_title(col)

# Seleccionar las columnas de interés para el análisis de correlaciones
cols = ['PassengerId', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare']
titanic_df_selected = titanic_df[cols]

# Calcular la matriz de correlaciones
correlation_matrix = titanic_df_selected.corr()

# Crear el gráfico de correlaciones utilizando Seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Gráfico de Correlaciones')

# Mostrar el gráfico
plt.show()